df %>%
filter(GCGiving2016 > 0) % > %
summarise(mean2016 = mean(GCGiving2016),
n = n())
df %>%
filter(GCGiving2016 > 0) %>%
summarise(mean2016 = mean(GCGiving2016),
n = n())
df %>%
filter(GCGiving2016 > 0) %>%
summarise(mean2016 = mean(GCGiving2016),
n = n())
df %>%
filter(GCGiving2017 > 0) %>%
summarise(mean2017 = mean(GCGiving2017),
n = n())
df %>%
filter(GCGiving2016 > 0) %>%
summarise(mean2016 = mean(GCGiving2016),
n = n())
df %>%
filter(GCGiving2017 > 0) %>%
summarise(mean2017 = mean(GCGiving2017),
n = n())
df %>%
filter(GCGiving2018 > 0) %>%
summarise(mean2018 = mean(GCGiving2018),
n = n())
df %>%
filter(GCGiving2019 > 0) %>%
summarise(mean2019 = mean(GCGiving2019),
n = n())
df %>%
filter(GCGiving2016 > 0) %>%
summarise(mean2016 = mean(GCGiving2016),
n = n())
df %>%
filter(GCGiving2017 > 0) %>%
summarise(mean2017 = mean(GCGiving2017),
n = n())
df %>%
filter(GCGiving2018 > 0) %>%
summarise(mean2018 = mean(GCGiving2018),
n = n())
df %>%
filter(GCGiving2019 > 0) %>%
summarise(mean2019 = mean(GCGiving2019),
n = n())
df %>%
filter(GCGiving2020 > 0) %>%
summarise(mean2020 = mean(GCGiving2020),
n = n())
View(df)
View(df)
df <- mutate(df, FirstGiftYear = substrRight(FirstGiftDate, 4))
# load packages
library(tidyverse)
library(ggplot2)
library(stringi)
df <- mutate(df, FirstGiftYear = stri_sub(FirstGiftDate,-4,-1))
View(df)
View(df)
df <- mutate(df, AdditionalDonations = (TotalGivingResUnres - FirstGiftAmount))
View(df)
View(df)
df %>%
group_by(FirstGiftYear) %>%
summarise(countAdditionalGiving = count(AdditionalDonations)) %>%
arrange(desc(FirstGiftYear))
df %>%
group_by(FirstGiftYear) %>%
summarise(countAdditionalGiving = n(AdditionalDonations)) %>%
arrange(desc(FirstGiftYear))
df %>%
group_by(FirstGiftYear) %>%
summarise(countAdditionalGiving = n()%>%
filter(AdditionalDonations > 0))
df %>%
group_by(FirstGiftYear) %>%
filter(AdditionalDonations > 0) %>%
summarise(countAdditionalGiving = n())
ggplot(data = df, aes(x = FirstGiftYear, y = AdditionalDonations))
ggplot(data = df, aes(x = FirstGiftYear, y = AdditionalDonations)) +
geom_bar()
ggplot(data = df, aes(x = FirstGiftYear, y = AdditionalDonations)) +
geom_bar(AdditionalDonations)
ggplot(data = df, aes(x = FirstGiftYear, y = AdditionalDonations)) +
geom_bar(stat = AdditionalDonations)
ggplot(data = df, aes(x = FirstGiftYear, y = AdditionalDonations)) +
geom_bar(stat = stat_count)
ggplot(data = df, aes(x = FirstGiftYear, y = AdditionalDonations)) +
geom_bar(stat = stat_count(AdditionalDonations))
ggplot(data = df, aes(x = FirstGiftYear, y = AdditionalDonations)) +
geom_bar(stat = stat_count())
ggplot(data = df, aes(x = FirstGiftYear, y = AdditionalDonations)) +
geom_bar(stat = stat = "count")
ggplot(data = df, aes(x = FirstGiftYear, y = AdditionalDonations)) +
geom_bar(stat = "count")
ggplot(data = df, aes(x = FirstGiftYear, y = AdditionalDonations)) +
geom_bar(stat = "identity")
ggplot(data = df, aes(x = FirstGiftYear, y = AdditionalDonations)) +
geom_bar(stat = "mean")
ggplot(data = df, aes(x = FirstGiftYear, y = AdditionalDonations)) +
geom_bar(stat = "average")
ggplot(data = df, aes(x = FirstGiftYear))
ggplot(data = df, aes(x = FirstGiftYear)) +
geom_histogram(binwidth = 1)
ggplot(data = df, aes(x = FirstGiftYear)) +
geom_histogram(binwidth = 1)
ggplot(data = df, aes(x = FirstGiftYear)) +
geom_histogram(binwidth = 1, stat = "count")
ggplot(data = df, aes(x = FirstGiftYear)) +
geom_histogram(stat = "count")
ggplot(data = df, aes(x = FirstGiftYear)) +
geom_histogram(stat = "count") +
ggtitle("Number of Additional Gifts per First Gift Year")
ggplot(data = df, aes(x = FirstGiftYear)) +
geom_histogram(stat = "count") +
ggtitle("Number of Gifts per First Gift Year")
ggplot(data = df, aes(x = FirstGiftYear)) +
geom_histogram(stat = "count") +
ggtitle("Number of Gifts per First Gift Year")
df %>%
group_by(FirstGiftYear) %>%
filter(AdditionalDonations > 0) %>%
summarise(averageAdditionalGiving = mean(AdditionalDonations))
ggplot(data = df, aes(x = FirstGiftYear, y = AdditionalDonations)) +
stat_summary(fun.y = "mean", geom = "bar")
ggtitle("Average Additional Giving By First Year of Giving")
# Remove $0 Additional Donations
dfNoZeroAdditionalDonations = df %>%
filter(AdditionalDonations > 0) %>%
ggplot(data = dfNoZeroAdditionalDonations, aes(x = FirstGiftYear, y = AdditionalDonations)) +
stat_summary(fun.y = "mean", geom = "bar")
# Remove $0 Additional Donations
dfNoZeroAdditionalDonations <- df %>%
filter(AdditionalDonations > 0) %>%
ggplot(data = dfNoZeroAdditionalDonations, aes(x = FirstGiftYear, y = AdditionalDonations)) +
stat_summary(fun.y = "mean", geom = "bar")
# Remove $0 Additional Donations
dfNoZeroAdditionalDonations <- df %>%
filter(AdditionalDonations > 0)
ggplot(data = dfNoZeroAdditionalDonations, aes(x = FirstGiftYear, y = AdditionalDonations)) +
stat_summary(fun.y = "mean", geom = "bar")
ggtitle("Average Additional Giving By First Year of Giving")
# Remove $0 Additional Donations
dfNoZeroAdditionalDonations <- df %>%
filter(AdditionalDonations > 0)
ggplot(data = dfNoZeroAdditionalDonations, aes(x = FirstGiftYear, y = AdditionalDonations)) +
stat_summary(fun.y = "mean", geom = "bar") +
ggtitle("Average Additional Giving By First Year of Giving")
pnorm(0.233)
pnorm(0.3301)
1 - pnorm((5.17/29.782))
1 - pnorm((-5.17/29.782))
qnorm(75)
qnorm(.75)
qnorm(.95)
qnorm(.975)
qnorm(.975) # == 95th percentile Z score
pnorm(.95)
pnorm(1.96)
# Find z multiplier at 90% confidence
qnorm(.95)
# Find z multiplier at 98% confidence
qnorm(.99)
# Find the z multiploer at 99% confidence
qnorm(.995)
# get the 95% CI for the Serviced coef
CIB1 = confint(copierModel, "Serviced", level = 0.95)
#getwd()
copierData <- read.table('copier.txt', sep='\t', header = TRUE)
setwd("~/UVaCode/R/STAT6021/Module02")
head(copierData,5)
'''
Exercise: Stat 6021: Homework Set 1
Name: H. Diana McSpadden
UID: hdm5s
'''
'''
Exercise: Stat 6021: Homework Set 1
Name: H. Diana McSpadden
UID: hdm5s
'''
#getwd()
copierData <- read.table('copier.txt', sep='\t', header = TRUE)
#getwd()
copierData <- read.table('copier.txt', sep='\t', header = TRUE)
#'''
source('~/UVaCode/R/STAT6021/Module02/Module02HW.R', echo=TRUE)
install.packages("MASS")
data <- read.table("windmill.txt", header=TRUE ,sep="")
setwd("~/UVaCode/R/STAT6021/Module03")
#----
data <- read.table("windmill.txt", header=TRUE ,sep="")
data <- read.table("windmill.txt", header=TRUE ,sep="")
attach(data)
head(data,5)
#----
result<-lm(output~wind)
#-----
data <- read.table("windmill.txt", header=TRUE ,sep="")
attach(data)
head(data,5)
#------
result<-lm(output~wind)
#------
result<-lm(output~wind)
summary(result)
#------
result<-lm(output~wind)
summary(result)
result
#-----
##scatterplot of data, with least squares line overlayed
plot(wind, output, main="Plot of DC Output against Wind Velocity")
abline(result,col="red")
#----
##residual plot
plot(result$fitted.values,result$residuals, main="Plot of Residuals against Fitted Values")
abline(h=0,col="red")
#----
##ACF plot of residuals
par(mfrow=c(2,1))
acf(result$residuals, main="ACF of Residuals")
##Normal probability or QQ plot of residuals
qqnorm(result$residuals)
qqline(result$residuals, col="red")
#---
##Transform
inv.wind<-1/wind
result.inv<-lm(output ~ inv.wind)
par(mfrow=c(2,2))
plot(inv.wind,output, main="Scatterplot after Transforming Predictor")
abline(result.inv,col="red")
plot(result.inv$fitted.values,result.inv$residuals, main="Plot of residuals against fits")
abline(h=0,col="red")
acf(result.inv$residuals, main="ACF of Residuals")
qqnorm(result.inv$residuals)
qqline(result.inv$residuals, col="red")
summary(result.inv)
##boxcox function found in MASS package. Need to install MASS package first
library(MASS)
boxcox(result.inv)
boxcox(result.inv, lambda = seq(0.6, 1.6, 0.01))
#-----
data <- read.table("windmill.txt", header=TRUE ,sep="")
attach(data)
head(data,5)
#------
result<-lm(output~wind)
summary(result)
result
#-----
##scatterplot of data, with least squares line overlayed
plot(wind, output, main="Plot of DC Output against Wind Velocity")
abline(result,col="red")
#----
##residual plot
plot(result$fitted.values,result$residuals, main="Plot of Residuals against Fitted Values")
abline(h=0,col="red")
#------
##ACF plot of residuals
par(mfrow=c(2,1))
acf(result$residuals, main="ACF of Residuals")
##Normal probability or QQ plot of residuals
qqnorm(result$residuals)
qqline(result$residuals, col="red")
#-----
##Transform
inv.wind<-1/wind
result.inv<-lm(output ~ inv.wind)
result.inv
#----
par(mfrow=c(2,2))
plot(inv.wind,output, main="Scatterplot after Transforming Predictor")
abline(result.inv,col="red")
plot(result.inv$fitted.values,result.inv$residuals, main="Plot of residuals against fits")
abline(h=0,col="red")
acf(result.inv$residuals, main="ACF of Residuals")
qqnorm(result.inv$residuals)
qqline(result.inv$residuals, col="red")
#----
summary(result.inv)
sigma(result)
sigma(result.inv)
anova(result.inv)
#----
##boxcox function found in MASS package. Need to install MASS package first
library(MASS)
boxcox(result.inv)
boxcox(result.inv, lambda = seq(0.6, 1.6, 0.01))
data <- read.table("defects.txt", header = TRUE, sep = "\t")
head(data,5)
#data
attach(data) # attach data so that we can refer directly to column headers
data <- read.table("defects.txt", header = TRUE, sep = "\t")
data
#data
attach(data) # attach data so that we can refer directly to column headers
data <- read.table("defects.txt", header = TRUE, sep = "\t")
head(data, 5)
#data
attach(data) # attach data so that we can refer directly to column headers
data <- read.table("defects.txt", header = TRUE, sep = "\t")
head(data, 5)
#data
attach(data) # attach data so that we can refer directly to column headers
data <- read.table("defects.txt", header = TRUE, sep = "\t")
head(data, 5)
#data
attach(data) # attach data so that we can refer directly to column headers
plot(x=weeks, y=defects, main='Plot Defects Against Weeks Since Maintenance', xlab = 'weeks', ylab = 'Defects (per 10,000 bottles')
plot(x=weeks, y=defects, main='Plot Defects Against Weeks Since Maintenance', xlab = 'weeks', ylab = 'Defects (per 10,000 bottles')
# add the regression line
abline(result,col="red")
plot(x=weeks, y=defects, main='Plot Defects Against Weeks Since Maintenance', xlab = 'weeks', ylab = 'Defects (per 10,000 bottles')
abline(result,col="red")
model = lm(defects~weeks)
plot(x=weeks, y=defects, main='Plot Defects Against Weeks Since Maintenance', xlab = 'weeks', ylab = 'Defects (per 10,000 bottles')
abline(model,col="red")
# plot the residuals against the fitted values
plot(model$fitted.values,model$residuals, main="Plot of Residuals against Fitted Values")
abline(h=0,col="red")
library(MASS)
boxcox(model)
#boxcox(result.inv, lambda = seq(0.6, 1.6, 0.01))
library(MASS)
#boxcox(model)
boxcox(model, lambda = seq(-1.5, 1.5, 0.01))
# y'  = ln(y)
ln.defects <- ln(defects)
# y'  = ln(y)
ln.defects <- log(defects)
model.ln <-lm(ln.defects ~ weeks)
model.ln
# y'  = ln(y)
ln.defects <- log(defects)
model.ln <-lm(ln.defects ~ weeks)
#model.ln
#residual plot of transformed y
plot(model.ln$fitted.values,model.ln$residuals, main="TRANSFORMED: Plot of Residuals against Fitted Values")
abline(h=0,col="red")
acf(model.ln$residuals, main="ACF of Residuals")
qqnorm(model.ln$residuals)
qqline(model.ln$residuals, col="red")
install.packages("faraway")
library(faraway)
data <- load(cornnit)
library(faraway)
data <- data(cornnit)
library(faraway)
data <- data(cornnit)
head(data, 5)
library(faraway)
summary(cornnit)
library(faraway)
#summary(cornnit)
cornnit
library(faraway)
#summary(cornnit)
head(cornnit, 5)
library(faraway)
#summary(cornnit)
head(cornnit, 5)
attach(cornnit)
# create a model
cornModel <- lm(yield~nitrogen)
#plot the model and the linear model
plot(x=nitrogen, y=yield, main='Plot Corn Yield Against Nitrogen', xlab = 'Nitrogen (lbs per acre)', ylab = 'Yield (bushels per acre')
abline(cornModel,col="red")
# create a model
cornModel <- lm(yield~nitrogen)
#plot the model and the linear model
plot(x=nitrogen, y=yield, main='Plot Corn Yield Against Nitrogen', xlab = 'Nitrogen (lbs per acre)', ylab = 'Yield (bushels per acre')
abline(cornModel,col="red")
cornModel
summary(cornModel)
anova(cornModel)
cornModel
plot(cornModel$fitted.values,model$residuals, main="Plot of Residuals against Fitted Values")
plot(cornModel$fitted.values,cornModel$residuals, main="Plot of Residuals against Fitted Values")
abline(h=0,col="red")
plot(cornModel$fitted.values,cornModel$residuals, main="Plot of Residuals against Fitted Values")
abline(h=0,col="red")
cornModel
plot(cornModel$fitted.values,cornModel$residuals, main="Plot of Residuals against Fitted Values")
abline(h=0,col="red")
cornModel
source('~/UVaCode/R/STAT6021/Module03/tutorial_module3.R', echo=TRUE)
library(MASS)
boxcox(model)
#boxcox(model, lambda = seq(-1.5, 1.5, 0.01))
library(MASS)
boxcox(model)
#boxcox(model, lambda = seq(-1.5, 1.5, 0.01))
library(MASS)
#boxcox(model)
boxcox(model, lambda = seq(-1.2, 1, 0.01))
plot(cornModel$fitted.values,cornModel$residuals, main="Plot of Residuals against Fitted Values")
abline(h=0,col="red")
# y'  = ln(y)
ln.yeild <- log(yield) # In R, log == ln
cornModel.ln <-lm(ln.yeild ~ weeks)
# y'  = ln(y)
ln.yeild <- log(yield) # In R, log == ln
cornModel.ln <-lm(ln.yeild~weeks)
# x'  = log10(x)
log10.nitrogen <- log10(nitrogen) # In R, log == ln
cornModel.xlog <-lm(yeild~log10.nitrogen)
library(faraway)
#summary(cornnit)
head(cornnit, 5)
attach(cornnit)
library(faraway)
#summary(cornnit)
head(cornnit, 5)
attach(cornnit)
library(faraway)
#summary(cornnit)
head(cornnit, 5)
attach(cornnit)
# create a model
cornModel <- lm(yield~nitrogen)
#plot the model and the linear model
plot(x=nitrogen, y=yield, main='Plot Corn Yield Against Nitrogen', xlab = 'Nitrogen (lbs per acre)', ylab = 'Yield (bushels per acre')
abline(cornModel,col="red")
plot(cornModel$fitted.values,cornModel$residuals, main="Plot of Residuals against Fitted Values")
abline(h=0,col="red")
library(MASS)
#boxcox(model)
boxcox(model, lambda = seq(-1.2, 1, 0.01))
library(MASS)
#boxcox(model)
boxcox(cornModel, lambda = seq(-1.2, 1, 0.01))
library(MASS)
boxcox(cornModel)
#boxcox(cornModel, lambda = seq(-1.2, 1, 0.01))
library(MASS)
boxcox(cornModel)
#boxcox(cornModel, lambda = seq(-1.2, 1, 0.01))
library(MASS)
#boxcox(cornModel)
boxcox(cornModel, lambda = seq(1, 2.5, 0.01))
library(MASS)
#boxcox(cornModel)
boxcox(cornModel, lambda = seq(1, 3.5, 0.01))
library(MASS)
#boxcox(cornModel)
boxcox(cornModel, lambda = seq(1, 4.2, 0.01))
library(MASS)
#boxcox(cornModel)
boxcox(cornModel, lambda = seq(1.4, 4.5, 0.01))
# x'  = log10(x)
log10.nitrogen <- log10(nitrogen) # In R, log == ln
cornModel.xlog <-lm(yeild~log10.nitrogen)
# x'  = log10(x)
log10.nitrogen <- log10(nitrogen) # In R, log == ln
cornModel.xlog <-lm(yield~log10.nitrogen)
View(cornnit)
View(cornnit)
View(cornnit)
# x'  = log10(x)
log10.nitrogen <- log10(nitrogen + .01) # In R, log == ln
cornModel.xlog <-lm(yield~log10.nitrogen)
#model.ln
#residual plot of transformed y
plot(cornModel.xlog$fitted.values,cornModel.xlog$residuals, main="TRANSFORMED: Plot of Residuals against Fitted Values")
abline(h=0,col="red")
# x'  = log10(x)
log10.nitrogen <- log(nitrogen + .01) # In R, log == ln
cornModel.xlog <-lm(yield~log10.nitrogen)
#model.ln
#residual plot of transformed y
plot(cornModel.xlog$fitted.values,cornModel.xlog$residuals, main="TRANSFORMED: Plot of Residuals against Fitted Values")
abline(h=0,col="red")
# x'  = log10(x)
log10.nitrogen <- log10(nitrogen + .01) # In R, log == ln
cornModel.xlog <-lm(yield~log10.nitrogen)
#model.ln
#residual plot of transformed y
plot(cornModel.xlog$fitted.values,cornModel.xlog$residuals, main="TRANSFORMED: Plot of Residuals against Fitted Values")
abline(h=0,col="red")
# x'  = 1/x
inv.nitrogen <- 1/nitrogen
cornModel.inv <-lm(yield~inv.nitrogen)
# x'  = 1/x
inv.nitrogen <- (1/(nitrogen + .0001))
cornModel.inv <-lm(yield~inv.nitrogen)
#model.ln
#residual plot of transformed y
plot(cornModel.xlog$fitted.values,cornModel.xlog$residuals, main="TRANSFORMED: Plot of Residuals against Fitted Values")
abline(h=0,col="red")
# x'  = 1/x
inv.nitrogen <- (1/(nitrogen + .0001))
cornModel.inv <-lm(yield~inv.nitrogen)
#model.ln
#residual plot of transformed y
plot(cornModel.inv$fitted.values,cornModel.inv$residuals, main="TRANSFORMED: Plot of Residuals against Fitted Values")
abline(h=0,col="red")
View(newdata)
View(newdata)
exp(0.44993)
exp(-0.44993)
(1 - exp(-0.44993)) * 100
(1 - exp(0.44993)) * 100
(exp(0.44993) - 1) * 100
(exp(-0.44993) - 1) * 100
(1 - exp(0.44993)) * 100
(exp(0.44993) - 1) * 100
log(1.50792)
exp(1.50792)
