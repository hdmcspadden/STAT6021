print(paste("Our Critical Value: ",criticalvalue2d))
yhatforx = 33.4744 + (10.7296 * 4.5)
print(paste("Our y0-hat: ",yhatforx))
print(paste("Our MS-residual: ",MSE))
n = 272
print(paste("Our n: ",n))
criticalvalue2d = qt(.975,270)
print(paste("Our Critical Value: ",criticalvalue2d))
yhatforx = 33.4744 + (10.7296 * 4.5)
print(paste("Our y0-hat: ",yhatforx))
print(paste("Our MS-residual: ",MSE))
n = 272
print(paste("Our n: ",n))
x0 = 4.5
print(paste("Our x0: ", x0))
criticalvalue2d = qt(.975,270)
print(paste("Our Critical Value: ",criticalvalue2d))
yhatforx = 33.4744 + (10.7296 * 4.5)
print(paste("Our y0-hat: ",yhatforx))
print(paste("Our MS-residual: ",MSE))
n = 272
print(paste("Our n: ",n))
OneOvern = 1/272
OneOvern
x0 = 4.5
print(paste("Our x0: ", x0))
criticalvalue2d = qt(.975,270)
print(paste("Our Critical Value: ",criticalvalue2d))
yhatforx = 33.4744 + (10.7296 * 4.5)
print(paste("Our y0-hat: ",yhatforx))
print(paste("Our MS-residual: ",MSE))
n = 272
print(paste("Our n: ",n))
OneOvern = 1/272
print(paste("Our 1/n: ",OneOvern))
x0 = 4.5
print(paste("Our x0: ", x0))
progress1 = 82.7022 - 81.7576
progress2 = progress1 / 1.969
progress1 = 82.7022 - 81.7576
progress2 = progress1 / 1.969
progress2
progress1 = 82.7022 - 81.7576
progress2 = progress1 / 1.969
#progress2
progress3 = progress2^2
#progress3
progress1 = 82.7022 - 81.7576
progress2 = progress1 / 1.969
#progress2
progress3 = progress2^2
progress3
progress1 = 82.7022 - 81.7576
progress2 = progress1 / 1.969
#progress2
progress3 = progress2^2
#progress3
progress4  = progress3 / MSE
progress1 = 82.7022 - 81.7576
progress2 = progress1 / criticalvalue2d
#progress2
progress3 = progress2^2
#progress3
progress4  = progress3 / MSE
progress1 = 82.7022 - 81.7576
progress2 = progress1 / criticalvalue2d
#progress2
progress3 = progress2^2
#progress3
progress4  = progress3 / MSE
progress4
progress1 = 82.7022 - 81.7576
progress2 = progress1 / criticalvalue2d
progress2
progress3 = progress2^2
progress3
progress4  = progress3 / MSE
progress4
progress1 = 82.7022 - 81.7576
progress2 = progress1 / criticalvalue2d
progress2
progress3 = progress2^2
progress3
progress4  = progress3 / MSE
progress4
UNKNOWNPART = progress4 - OneOvern
UNKNOWNPART
progress1 = 82.7022 - 81.7576
progress2 = progress1 / criticalvalue2d
#progress2
progress3 = progress2^2
#progress3
progress4  = progress3 / MSE
#progress4
UNKNOWNPART = progress4 - OneOvern
print(paste("Our UNKNOWNPART is: ",UNKNOWNPART))
lower.prediction  = 81.7576 - ((criticalvalue2d) * sqrt((MSE) * (1 + OneOvern + UNKNOWNPART)))
lower.prediction  = 81.7576 - ((criticalvalue2d) * sqrt((MSE) * (1 + OneOvern + UNKNOWNPART)))
upper.prediction = 81.7576 + ((criticalvalue2d) * sqrt((MSE) * (1 + OneOvern + UNKNOWNPART)))
print(paste("Our 95% CI prediction interval for x of 4.5 is: ", lower.prediction, " - ", upper.prediction))
threshold <- 0.6 # set a correlation threshold, is there a standard? A: Not really.
corWorking <- seatpos.cor
library(faraway)
data(seatpos)
attach(seatpos)
seat.FullModel <- lm(hipcenter~., data=seatpos)
seat.FullModel
##This regresses hipcenter against all the other variabes in the dataframe seatpos
summary(seat.FullModel)
# all correlation matrix
seatpos.cor <- cor(seatpos)
seatpos.cor
threshold <- 0.6 # set a correlation threshold, is there a standard? A: Not really.
corWorking <- seatpos.cor
diag(corWorking) <- 0 # set diagonal to 0 so 1's of unrelated don't get caught in threshold
seatpos.cor.related <- apply(abs(corWorking) >= threshold, 1, any) # apply the filter to the absolute value of the correlations between variables.
seatpos.cor[seatpos.cor.related, seatpos.cor.related]
threshold <- 0.7 # set a correlation threshold, is there a standard? A: Not really.
corWorking <- seatpos.cor
diag(corWorking) <- 0 # set diagonal to 0 so 1's of unrelated don't get caught in threshold
seatpos.cor.related <- apply(abs(corWorking) >= threshold, 1, any) # apply the filter to the absolute value of the correlations between variables.
seatpos.cor[seatpos.cor.related, seatpos.cor.related]
threshold <- 0.8 # set a correlation threshold, is there a standard? A: Not really.
corWorking <- seatpos.cor
diag(corWorking) <- 0 # set diagonal to 0 so 1's of unrelated don't get caught in threshold
seatpos.cor.related <- apply(abs(corWorking) >= threshold, 1, any) # apply the filter to the absolute value of the correlations between variables.
seatpos.cor[seatpos.cor.related, seatpos.cor.related]
threshold <- 0.6 # set a correlation threshold, is there a standard? A: Not really.
corWorking <- seatpos.cor
diag(corWorking) <- 0 # set diagonal to 0 so 1's of unrelated don't get caught in threshold
seatpos.cor.related <- apply(abs(corWorking) >= threshold, 1, any) # apply the filter to the absolute value of the correlations between variables.
seatpos.cor[seatpos.cor.related, seatpos.cor.related]
threshold <- 0.8 # set a correlation threshold, is there a standard? A: Not really.
corWorking <- seatpos.cor
diag(corWorking) <- 0 # set diagonal to 0 so 1's of unrelated don't get caught in threshold
seatpos.cor.related <- apply(abs(corWorking) >= threshold, 1, any) # apply the filter to the absolute value of the correlations between variables.
seatpos.cor[seatpos.cor.related, seatpos.cor.related]
vif(seat.FullModel)
View(seatpos)
round(cor(seatpos[,3:8]),3) ##notice in your dataframe that the
##6 variables we want pairwise correlations are in the 3rd to 8th
##columns of the dataset. seatpos[,3:8] says we want to use the
##values from all rows and columns 3 to 8 of the dataframe.
round(cor(seatpos[,3:8]),3, lower=FALSE) ##notice in your dataframe that the
round(cor(seatpos[,3:8], lower=FALSE),3) ##notice in your dataframe that the
round(cor(seatpos[,3:8]),3) ##notice in your dataframe that the
##6 variables we want pairwise correlations are in the 3rd to 8th
##columns of the dataset. seatpos[,3:8] says we want to use the
##values from all rows and columns 3 to 8 of the dataframe.
library(janitor)
install.packages("janitor")
library(janitor)
#round(cor(seatpos[,3:8]),3)
round(cor(seatpos[,3:8]),3) %>% adorn_totals("row") ##notice in your dataframe that the
library(janitor)
df = round(cor(seatpos[,3:8]),3)
df %>% adorn_totals("row") ##notice in your dataframe that the
library(janitor)
df = round(cor(seatpos[,3:8]),3)
df
df %>% adorn_totals("row") ##notice in your dataframe that the
library(janitor)
cor.seated = round(cor(seatpos[,3:8]),3)
as.data.frame(as.table(cor.seated)) %>% adorn_totals("row")
##notice in your dataframe that the
##6 variables we want pairwise correlations are in the 3rd to 8th
##columns of the dataset. seatpos[,3:8] says we want to use the
##values from all rows and columns 3 to 8 of the dataframe.
library(janitor)
cor.seated = round(cor(seatpos[,3:8]),3)
as.data.frame((cor.seated)) %>% adorn_totals("row")
##notice in your dataframe that the
##6 variables we want pairwise correlations are in the 3rd to 8th
##columns of the dataset. seatpos[,3:8] says we want to use the
##values from all rows and columns 3 to 8 of the dataframe.
library(janitor)
cor.seated = round(cor(seatpos[,3:8]),3)
as.data.frame((cor.seated), optional = TRUE) %>% adorn_totals("row")
##notice in your dataframe that the
##6 variables we want pairwise correlations are in the 3rd to 8th
##columns of the dataset. seatpos[,3:8] says we want to use the
##values from all rows and columns 3 to 8 of the dataframe.
library(janitor)
cor.seated = round(cor(seatpos[,3:8]),3)
as.data.frame((cor.seated), optional = FALSE) %>% adorn_totals("row")
##notice in your dataframe that the
##6 variables we want pairwise correlations are in the 3rd to 8th
##columns of the dataset. seatpos[,3:8] says we want to use the
##values from all rows and columns 3 to 8 of the dataframe.
library(janitor)
cor.seated = round(cor(seatpos[,3:8]),3)
cor.seated
as.data.frame((cor.seated), row.names = NULL, optional = FALSE) %>% adorn_totals("row")
##notice in your dataframe that the
##6 variables we want pairwise correlations are in the 3rd to 8th
##columns of the dataset. seatpos[,3:8] says we want to use the
##values from all rows and columns 3 to 8 of the dataframe.
library(janitor)
cor.seated = round(cor(seatpos[,3:8]),3)
cor.seated
as.data.frame((cor.seated), row.names = ['HtShoes','Ht','Seated','Arm','Thigh','Leg'], optional = FALSE) %>% adorn_totals("row")
library(janitor)
cor.seated = round(cor(seatpos[,3:8]),3)
cor.seated
as.data.frame((cor.seated), row.names = ('HtShoes','Ht','Seated','Arm','Thigh','Leg'), optional = FALSE) %>% adorn_totals("row")
library(janitor)
cor.seated = round(cor(seatpos[,3:8]),3)
cor.seated
as.data.frame((cor.seated), row.names = 'HtShoes','Ht','Seated','Arm','Thigh','Leg', optional = FALSE) %>% adorn_totals("row")
##notice in your dataframe that the
##6 variables we want pairwise correlations are in the 3rd to 8th
##columns of the dataset. seatpos[,3:8] says we want to use the
##values from all rows and columns 3 to 8 of the dataframe.
library(janitor)
cor.seated = round(cor(seatpos[,3:8]),3)
#cor.seated
as.data.frame((cor.seated), row.names = 'HtShoes','Ht','Seated','Arm','Thigh','Leg', optional = FALSE) %>% adorn_totals("row")
##notice in your dataframe that the
##6 variables we want pairwise correlations are in the 3rd to 8th
##columns of the dataset. seatpos[,3:8] says we want to use the
##values from all rows and columns 3 to 8 of the dataframe.
library(janitor)
cor.seated = round(cor(seatpos[,3:8]),3)
cor.seated
#as.data.frame((cor.seated), row.names = 'HtShoes','Ht','Seated','Arm','Thigh','Leg', optional = FALSE) %>% adorn_totals("row")
##notice in your dataframe that the
##6 variables we want pairwise correlations are in the 3rd to 8th
##columns of the dataset. seatpos[,3:8] says we want to use the
##values from all rows and columns 3 to 8 of the dataframe.
seat.ReducedModel <- lm(hipcenter~Age+Weight+Ht, data=seatpos)
seat.ReducedModel
seat.ReducedModel <- lm(hipcenter~Age+Weight+Ht, data=seatpos)
vif(seat.ReducedModel)
anova(seat.ReducedModel,seat.FullModel)
par(mfrow=c(2,2)) # 2 rows, 2 columns - there will be three panes to look through
# Residual plot
plot(seat.ReducedModel$fitted.values,seat.ReducedModel$residuals, main="MLR: Residuals vs. Fitted Values")
abline(h=0,col="red")
# ACF Plot
acf(seat.ReducedModel$residuals, main="MLR: ACF of Residuals")
# QQ Plot of Residuals
qqnorm(seat.ReducedModel$residuals)
qqline(seat.ReducedModel$residuals, col="red")
seat.ReducedModel
summary(seat.ReducedModel)
summary(seat.FullModel)
print(paste("R2 Reduced Model: ",r.squared(seat.ReducedModel)))
print(paste("R2 Reduced Model: ",summary(seat.ReducedModel)$r.squared ))
print(paste("R2 Full Model: ",summary(seat.FullModel)$r.squared ))
hip.error<-hipcenter+10*rnorm(38) ##adds an error term that is N(0,10^2) to the 38 observations
hip.error
hipcenter
hip.error<-hipcenter+10*rnorm(38) ##adds an error term that is N(0,10^2) to the 38 observations
hip.error
hipcenter
hip.error<-hipcenter+10*rnorm(38) ##adds an error term that is N(0,10^2) to the 38 observations
hip.error
hip.error<-hipcenter+10*rnorm(38) ##adds an error term that is N(0,10^2) to the 38 observations
hip.error
hip.error<-hipcenter+10*rnorm(38) ##adds an error term that is N(0,10^2) to the 38 observations
hip.error
hip.error<-hipcenter+10*rnorm(38) ##adds an error term that is N(0,10^2) to the 38 observations
hip.error
seat.Error.FullModel <- lm(hip.error~x1+x2+x3+x4+x5+x6+x7+x8)
seat.Error.FullModel <- lm(hip.error~x1+x2+x3+x4+x5+x6+x7+x8, data=seatpos)
library(faraway)
data(seatpos)
attach(seatpos)
seat.FullModel <- lm(hipcenter~., data=seatpos)
seat.FullModel
##This regresses hipcenter against all the other variabes in the dataframe seatpos
summary(seat.FullModel)
# all correlation matrix
seatpos.cor <- cor(seatpos)
seatpos.cor
threshold <- 0.8 # set a correlation threshold, is there a standard? A: Not really.
corWorking <- seatpos.cor
diag(corWorking) <- 0 # set diagonal to 0 so 1's of unrelated don't get caught in threshold
seatpos.cor.related <- apply(abs(corWorking) >= threshold, 1, any) # apply the filter to the absolute value of the correlations between variables.
seatpos.cor[seatpos.cor.related, seatpos.cor.related]
vif(seat.FullModel)
library(janitor)
cor.seated = round(cor(seatpos[,3:8]),3)
cor.seated
#as.data.frame((cor.seated), row.names = 'HtShoes','Ht','Seated','Arm','Thigh','Leg', optional = FALSE) %>% adorn_totals("row")
##notice in your dataframe that the
##6 variables we want pairwise correlations are in the 3rd to 8th
##columns of the dataset. seatpos[,3:8] says we want to use the
##values from all rows and columns 3 to 8 of the dataframe.
seat.ReducedModel <- lm(hipcenter~Age+Weight+Ht, data=seatpos)
vif(seat.ReducedModel)
anova(seat.ReducedModel,seat.FullModel)
par(mfrow=c(2,2)) # 2 rows, 2 columns - there will be three panes to look through
# Residual plot
plot(seat.ReducedModel$fitted.values,seat.ReducedModel$residuals, main="MLR: Residuals vs. Fitted Values")
abline(h=0,col="red")
# ACF Plot
acf(seat.ReducedModel$residuals, main="MLR: ACF of Residuals")
# QQ Plot of Residuals
qqnorm(seat.ReducedModel$residuals)
qqline(seat.ReducedModel$residuals, col="red")
seat.ReducedModel
print(paste("R2 Reduced Model: ",summary(seat.ReducedModel)$r.squared ))
print(paste("R2 Full Model: ",summary(seat.FullModel)$r.squared ))
hipcenter
hip.error<-hipcenter+10*rnorm(38) ##adds an error term that is N(0,10^2) to the 38 observations
hip.error
seat.Error.FullModel <- lm(hip.error~x1+x2+x3+x4+x5+x6+x7+x8, data=seatpos)
seat.Error.FullModel <- lm(hip.error~Age+Weight+HtShoes+Ht+Seated+Arm+Thigh+Leg , data=seatpos)
seat.Error.FullModel <- lm(hip.error~Age+Weight+HtShoes+Ht+Seated+Arm+Thigh+Leg , data=seatpos)
print("Coefficients From Error Corrected Model:")
seat.Error.FullModel
seat.Error.FullModel <- lm(hip.error~Age+Weight+HtShoes+Ht+Seated+Arm+Thigh+Leg , data=seatpos)
print("Coefficients From Error Corrected Model:")
seat.Error.FullModel
print("Coefficients From Error Corrected Model:")
seat.FullModel
print("Summary of Error Corrected Model:")
summary(seat.Error.FullModel)
print("Summary of Error Corrected Model:")
summary(seat.FullModel)
seat.Error.FullModel <- lm(hip.error~Age+Weight+HtShoes+Ht+Seated+Arm+Thigh+Leg , data=seatpos)
print("Coefficients From Error Corrected Model:")
seat.Error.FullModel
print("Coefficients From Full Model:")
seat.FullModel
print("Summary of Error Corrected Model:")
summary(seat.Error.FullModel)
print("Summary of Full Model:")
summary(seat.FullModel)
# load the data
#?swiss
attach(swiss)
swissModel <-lm(Fertility ~ Education + Catholic + Infant.Mortality)
swissModel
swissModel.Full <-lm(Fertility~., data=swiss)
swissModelFull # view the full model coefficients
swissModel.Full <-lm(Fertility~., data=swiss)
swissModelFull # view the full model coefficients
swissModel.Full <-lm(Fertility~., data=swiss)
swissModel.Full # view the full model coefficients
swissModel.Reduced <-lm(Fertility ~ Education + Catholic + Infant.Mortality)
swissModelReduced # view the reduced coefficients
swissModel.Full <-lm(Fertility~., data=swiss)
swissModel.Full # view the full model coefficients
swissModel.Reduced <-lm(Fertility ~ Education + Catholic + Infant.Mortality)
swissModel.Reduced # view the reduced coefficients
# run the anova for the reduced model
anova(swissModel.Reduced,swissModel.Full)
# run the anova for the full model
anova(swissModel.Full)
# run the anova for the reduced model
anova(swissModel.Reduced,swissModel.Full)
print("")
# run the anova for the full model
anova(swissModel.Full)
# run the anova for the reduced model
anova(swissModel.Reduced,swissModel.Full)
print("\n")
# run the anova for the full model
anova(swissModel.Full)
# run the anova for the reduced model
anova(swissModel.Reduced,swissModel.Full)
print("\\n")
# run the anova for the full model
anova(swissModel.Full)
# run the anova for the reduced model
anova(swissModel.Reduced,swissModel.Full)
# run the anova for the full model
anova(swissModel.Full)
swissModel.Full <-lm(Fertility~Education + Catholic + Infant.Mortality + Agriculture + Examination)
swissModel.Full # view the full model coefficients
swissModel.Reduced <-lm(Fertility ~ Education + Catholic + Infant.Mortality)
swissModel.Reduced # view the reduced coefficients
# run the anova for the reduced model
anova(swissModel.Reduced,swissModel.Full)
# run the anova for the full model
anova(swissModel.Full)
# run the anova for the reduced model vs full model
anova(swissModel.Reduced,swissModel.Full)
qf(0.95,3,27)
source('~/UVaCode/R/STAT6021/Module05/tutorial_module5.R', echo=TRUE)
setwd("~/UVaCode/R/STAT6021/Module05")
source('~/UVaCode/R/STAT6021/Module05/tutorial_module5.R', echo=TRUE)
qf(0.95,2,41)
View(swissModel)
qf(0.95,2,43)
qf(0.95,2,43)
print(paste("Test Statistic: ",qf(0.95,2,43)))
par(mfrow=c(2,2)) # 2 rows, 2 columns - there will be three panes to look through
# Residual plot
plot(swissModel.Reduced$fitted.values,swissModel.Reduced$residuals, main="MLR: Residuals vs. Fitted Values")
abline(h=0,col="red")
# ACF Plot
acf(swissModel.Reduced$residuals, main="MLR: ACF of Residuals")
# QQ Plot of Residuals
qqnorm(swissModel.Reduced$residuals)
qqline(swissModel.Reduced$residuals, col="red")
anova(swissModel.Reduced)
summary(swissModel.Reduced)
summary(swissModel.Reduced)
anova(swissModel.Reduced)
par(mfrow=c(2,2)) # 2 rows, 2 columns - there will be three panes to look through
# Residual plot
plot(swissModel.Reduced$fitted.values,swissModel.Reduced$residuals, main="MLR: Residuals vs. Fitted Values")
abline(h=0,col="red")
# ACF Plot
acf(swissModel.Reduced$residuals, main="MLR: ACF of Residuals")
# QQ Plot of Residuals
qqnorm(swissModel.Reduced$residuals)
qqline(swissModel.Reduced$residuals, col="red")
## BoxCox
boxcox(swissModel.Reduced)
par(mfrow=c(2,2)) # 2 rows, 2 columns - there will be three panes to look through
# Residual plot
plot(swissModel.Reduced$fitted.values,swissModel.Reduced$residuals, main="MLR: Residuals vs. Fitted Values")
abline(h=0,col="red")
# ACF Plot
acf(swissModel.Reduced$residuals, main="MLR: ACF of Residuals")
# QQ Plot of Residuals
qqnorm(swissModel.Reduced$residuals)
qqline(swissModel.Reduced$residuals, col="red")
## BoxCox
library(MASS)
boxcox(swissModel.Reduced, lambda = seq(0, 1, 0.01))
par(mfrow=c(2,2)) # 2 rows, 2 columns - there will be three panes to look through
# Residual plot
plot(swissModel.Reduced$fitted.values,swissModel.Reduced$residuals, main="MLR: Residuals vs. Fitted Values")
abline(h=0,col="red")
# ACF Plot
acf(swissModel.Reduced$residuals, main="MLR: ACF of Residuals")
# QQ Plot of Residuals
qqnorm(swissModel.Reduced$residuals)
qqline(swissModel.Reduced$residuals, col="red")
## BoxCox
library(MASS)
boxcox(swissModel.Reduced, lambda = seq(-1, 2, 0.01))
par(mfrow=c(2,2)) # 2 rows, 2 columns - there will be three panes to look through
# Residual plot
plot(swissModel.Reduced$fitted.values,swissModel.Reduced$residuals, main="MLR: Residuals vs. Fitted Values")
abline(h=0,col="red")
# ACF Plot
acf(swissModel.Reduced$residuals, main="MLR: ACF of Residuals")
# QQ Plot of Residuals
qqnorm(swissModel.Reduced$residuals)
qqline(swissModel.Reduced$residuals, col="red")
## BoxCox
library(MASS)
boxcox(swissModel.Reduced, lambda = seq(-0.5, 2, 0.01))
data <- read.table("mileage.txt", header=TRUE ,sep="")
attach(data)
# regress data set against 4 variables:
# x1: displacement (in^3)
# x2: horsepower
# x6: barrels in carburetor
# x10: weight (lb)
# y = gas mileage
result<-lm(y~x1+x2+x6+x10)
summary(result)
reduced<-lm(y~x1)
anova(reduced,result)
anova(result)
((6.55+12.04+3.37)/3)/(259.86/27)
1-pf(0.7608,3,27)
qf(0.95,3,27)
((0.136 + 5.101 + 0.028) / 3) / (105.413 / 107)
((6.55+12.04+3.37)/3)/(259.86/27)
F0 = ((0.136 + 5.101 + 0.028) / 3) / (105.413 / 107)
1-pf(F0,3,107)
F0 = ((0.136 + 5.101 + 0.028) / 3) / (105.413 / 107)
pvalue = 1-pf(F0,3,107)
F0 = ((0.136 + 5.101 + 0.028) / 3) / (105.413 / 107)
pvalue = 1-pf(F0,3,107)
pvalue
# calculate that F statistic using SSR's and SSE
F0 = ((0.136 + 5.101 + 0.028) / 3) / (105.413 / 107)
# create the pvalue
pvalue = 1-pf(F0,3,107)
pvalue
# calculate that F statistic using SSR's and SSE
F0 = ((0.136 + 5.101 + 0.028) / 3) / (105.413 / 107)
# create the pvalue
pvalue = 1-pf(F0,3,107)
print(paste("The p value for the F statistic is", pvalue))
anova(result)
# calculate that F statistic using SSR's and SSE
F0 = ((0.136 + 5.101 + 0.028) / 3) / (105.413 / 107)
# create the critical value
criticalFValue = qf(0.95,3,107)
print(paste("The critical value is: ", criticalFValue))
# create the pvalue
pvalue = 1-pf(F0,3,107)
print(paste("The p value for the F statistic is: ", pvalue))
# calculate that F statistic using SSR's and SSE
F0 = ((0.136 + 5.101 + 0.028) / 3) / (105.413 / 107)
print(paste("F0 is: ", F0))
# create the critical value
criticalFValue = qf(0.95,3,107)
print(paste("The critical value is: ", criticalFValue))
# create the pvalue
pvalue = 1-pf(F0,3,107)
print(paste("The p value for the F statistic is: ", pvalue))
# calculate that F statistic using SSR's and SSE when dropping x3 and x4
F0 = ((0.136 + 5.101) / 2) / (105.413 / 108)
print(paste("F0 is: ", F0))
# create the critical value
criticalFValue = qf(0.95,2,108)
print(paste("The critical value is: ", criticalFValue))
# create the pvalue
pvalue = 1-pf(F0,2,108)
print(paste("The p value for the F statistic is: ", pvalue))
View(result)
