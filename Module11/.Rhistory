abline(h=0,col="red")
##acf plot of residuals
acf(result.prime$residuals)
##qq plot of residuals
qqnorm(result.prime$residuals)
qqline(result.prime$residuals, col="red")
# setup
library(boot)
# get the data & attach
data<-read.table("nfl.txt", header=TRUE, sep="")
attach(data)
# myLOOCVLoop function
# inpuut: the dataset: dataframe, leaveOutIndex: the index to use as the test value
# output: the MSE for the requested loop of LOOCV
myLOOCVLoop <- function(theData, leaveOutIndex) {
# leave out the i-th value for testing
test <- theData[leaveOutIndex, ]
# keep rest of data for training
train <- theData[-leaveOutIndex, ]
# fit to training data
glm.fit<-glm(y~x2+x7+x8, data=train)
## get predicted value from test data
preds<-predict(glm.fit,newdata=test)
#print(paste("Prediction: ", preds))
#print(paste("Actual: ", test[1]))
# calculate square of difference between predicted and actual
difsquared = (preds - test[1])^2
# return dif squared
return(difsquared)
}
# I want to calculate: #mean((data$actual - data$pred)^2)
# create an accumulator variable
difSquaredAccummulator <- 0
# loop through all rows in data set
for (i in 1:nrow(data))
{
# add to accumulator the dif Squared
difSquaredAccummulator <- difSquaredAccummulator + myLOOCVLoop(data,i)
}
# get average of dif squared == MSE for LOOCV
mseLOOCV <- difSquaredAccummulator / nrow(data)
print(paste("My LOOCV: ", mseLOOCV))
##transform response and predictor
shift<-ar.1$coef
#?lag
#create new column bind, shifts company variable by 1
y<-cbind(as.ts(company),lag(company,1))
yprime<-y[,2] - shift*y[,1]
#y
#yprime
x<-cbind(as.ts(industry),lag(industry))
xprime<-x[,2] - shift*x[,1]
#x
#xprime
##perform regression on transformed variables
result.prime<-lm(yprime~xprime)
result.prime
#summary(result.prime)
#setup
library(dplyr)
# get the data
mcData<-read.table("mcgill.txt", header=FALSE, sep="")
colnames(mcData)<-c("company","industry")
mcData
attach(mcData)
?arima
mcResult<-lm(company~industry)
summary(mcResult)
mcRes<-mcResult$residuals
##PACF plot of residuals
pacf(mcRes, main="PACF of Residuals")
# significant at lag 1
##fit an AR(1) model for residuals
# order = c(1,0,0) indicates the p value == 1
ar.1<-arima(mcRes, order = c(1,0,0), include.mean = FALSE)
ar.1
ar.1$coef
##transform response and predictor
shift<-ar.1$coef
#?lag
#create new column bind, shifts company variable by 1
y<-cbind(as.ts(company),lag(company,1))
yprime<-y[,2] - shift*y[,1]
#y
#yprime
x<-cbind(as.ts(industry),lag(industry))
xprime<-x[,2] - shift*x[,1]
#x
#xprime
##perform regression on transformed variables
result.prime<-lm(yprime~xprime)
result.prime
#summary(result.prime)
##residual plot
plot(result.prime$fitted.values,result.prime$residuals, main="Plot of Residuals against Fitted Values")
abline(h=0,col="red")
##acf plot of residuals
acf(result.prime$residuals)
##qq plot of residuals
qqnorm(result.prime$residuals)
qqline(result.prime$residuals, col="red")
# setup
library(boot)
# get the data & attach
data<-read.table("nfl.txt", header=TRUE, sep="")
attach(data)
# myLOOCVLoop function
# inpuut: the dataset: dataframe, leaveOutIndex: the index to use as the test value
# output: the MSE for the requested loop of LOOCV
myLOOCVLoop <- function(theData, leaveOutIndex) {
# leave out the i-th value for testing
test <- theData[leaveOutIndex, ]
# keep rest of data for training
train <- theData[-leaveOutIndex, ]
# fit to training data
glm.fit<-glm(y~x2+x7+x8, data=train)
## get predicted value from test data
preds<-predict(glm.fit,newdata=test)
#print(paste("Prediction: ", preds))
#print(paste("Actual: ", test[1]))
# calculate square of difference between predicted and actual
difsquared = (preds - test[1])^2
# return dif squared
return(difsquared)
}
# I want to calculate: #mean((data$actual - data$pred)^2)
# create an accumulator variable
difSquaredAccummulator <- 0
# loop through all rows in data set
for (i in 1:nrow(data))
{
# add to accumulator the dif Squared
difSquaredAccummulator <- difSquaredAccummulator + myLOOCVLoop(data,i)
}
# get average of dif squared == MSE for LOOCV
mseLOOCV <- difSquaredAccummulator / nrow(data)
print(paste("My LOOCV: ", mseLOOCV))
##transform response and predictor
shift<-ar.1$coef
#?lag
#create new column bind, shifts company variable by 1
y<-cbind(as.ts(company),lag(company,1))
yprime<-y[,2] - shift*y[,1]
#y
#yprime
x<-cbind(as.ts(industry),lag(industry,1))
xprime<-x[,2] - shift*x[,1]
#x
#xprime
##perform regression on transformed variables
result.prime<-lm(yprime~xprime)
result.prime
#summary(result.prime)
##transform response and predictor
shift<-ar.1$coef
#?lag
#create new column bind, shifts company variable by 1
y<-cbind(as.ts(company),lag(company,1))
yprime<-y[,2] - shift*y[,1]
#y
#yprime
x<-cbind(as.ts(industry),lag(industry))
xprime<-x[,2] - shift*x[,1]
#x
#xprime
##perform regression on transformed variables
result.prime<-lm(yprime~xprime)
result.prime
#summary(result.prime)
library(car)
durbinWatsonTest(result.prime)
library(car)
durbinWatsonTest(result.prime)
##transform response and predictor
shift<-ar.1$coef
#?lag
#create new column bind, shifts company variable by 1
y<-cbind(as.ts(company),lag(company,1))
yprime<-y[,2] - shift*y[,1]
#y
#yprime
x<-cbind(as.ts(industry),lag(industry))
xprime<-x[,2] - shift*x[,1]
#x
#xprime
##perform regression on transformed variables
result.prime<-lm(yprime~xprime)
result.prime
summary(result.prime)
summary(result.prime)
# setup
library(boot)
# get the data & attach
data<-read.table("nfl.txt", header=TRUE, sep="")
attach(data)
# myLOOCVLoop function
# inpuut: the dataset: dataframe, leaveOutIndex: the index to use as the test value
# output: the MSE for the requested loop of LOOCV
myLOOCVLoop <- function(theData, leaveOutIndex) {
# leave out the i-th value for testing
test <- theData[leaveOutIndex, ]
# keep rest of data for training
train <- theData[-leaveOutIndex, ]
# fit to training data
glm.fit<-glm(y~x2+x7+x8, data=train)
## get predicted value from test data
preds<-predict(glm.fit,newdata=test)
#print(paste("Prediction: ", preds))
#print(paste("Actual: ", test[1]))
# calculate square of difference between predicted and actual
difsquared = (preds - test[1])^2
# return dif squared
return(difsquared)
}
# I want to calculate: #mean((data$actual - data$pred)^2)
# create an accumulator variable
difSquaredAccummulator <- 0
# loop through all rows in data set
for (i in 1:nrow(data))
{
# add to accumulator the dif Squared
difSquaredAccummulator <- difSquaredAccummulator + myLOOCVLoop(data,i)
}
# get average of dif squared == MSE for LOOCV
mseLOOCV <- difSquaredAccummulator / nrow(data)
print(paste("My LOOCV: ", mseLOOCV))
##transform response and predictor
shift<-ar.1$coef
#?lag
#create new column bind, shifts company variable by 1
y<-cbind(as.ts(company),lag(company))
yprime<-y[,2] - shift*y[,1]
#y
#yprime
x<-cbind(as.ts(industry),lag(industry))
xprime<-x[,2] - shift*x[,1]
#x
#xprime
##perform regression on transformed variables
result.prime<-lm(yprime~xprime)
result.prime
##transform response and predictor
shift<-ar.1$coef
#?lag
#create new column bind, shifts company variable by 1
y<-cbind(as.ts(company),lag(company,1))
yprime<-y[,2] - shift*y[,1]
#y
#yprime
x<-cbind(as.ts(industry),lag(industry))
xprime<-x[,2] - shift*x[,1]
#x
#xprime
##perform regression on transformed variables
result.prime<-lm(yprime~xprime)
result.prime
##transform response and predictor
shift<-ar.1$coef
#?lag
#create new column bind, shifts company variable by 1
y<-cbind(as.ts(company),lag(company))
yprime<-y[,2] - shift*y[,1]
#y
#yprime
x<-cbind(as.ts(industry),lag(industry))
xprime<-x[,2] - shift*x[,1]
#x
#xprime
##perform regression on transformed variables
result.prime<-lm(yprime~xprime)
result.prime
#setup
library(dplyr)
# get the data
mcData<-read.table("mcgill.txt", header=FALSE, sep="")
colnames(mcData)<-c("company","industry")
mcData
attach(mcData)
?arima
mcResult<-lm(company~industry)
summary(mcResult)
mcRes<-mcResult$residuals
##PACF plot of residuals
pacf(mcRes, main="PACF of Residuals")
# significant at lag 1
##fit an AR(1) model for residuals
# order = c(1,0,0) indicates the p value == 1
ar.1<-arima(mcRes, order = c(1,0,0), include.mean = FALSE)
ar.1
ar.1$coef
##transform response and predictor
shift<-ar.1$coef
#?lag
#create new column bind, shifts company variable by 1
y<-cbind(as.ts(company),lag(company))
yprime<-y[,2] - shift*y[,1]
#y
#yprime
x<-cbind(as.ts(industry),lag(industry))
xprime<-x[,2] - shift*x[,1]
#x
#xprime
##perform regression on transformed variables
result.prime<-lm(yprime~xprime)
result.prime
##residual plot
plot(result.prime$fitted.values,result.prime$residuals, main="Plot of Residuals against Fitted Values")
abline(h=0,col="red")
##acf plot of residuals
acf(result.prime$residuals)
##qq plot of residuals
qqnorm(result.prime$residuals)
qqline(result.prime$residuals, col="red")
summary(result.prime)
# setup
library(boot)
# get the data & attach
data<-read.table("nfl.txt", header=TRUE, sep="")
attach(data)
# myLOOCVLoop function
# inpuut: the dataset: dataframe, leaveOutIndex: the index to use as the test value
# output: the MSE for the requested loop of LOOCV
myLOOCVLoop <- function(theData, leaveOutIndex) {
# leave out the i-th value for testing
test <- theData[leaveOutIndex, ]
# keep rest of data for training
train <- theData[-leaveOutIndex, ]
# fit to training data
glm.fit<-glm(y~x2+x7+x8, data=train)
## get predicted value from test data
preds<-predict(glm.fit,newdata=test)
#print(paste("Prediction: ", preds))
#print(paste("Actual: ", test[1]))
# calculate square of difference between predicted and actual
difsquared = (preds - test[1])^2
# return dif squared
return(difsquared)
}
# I want to calculate: #mean((data$actual - data$pred)^2)
# create an accumulator variable
difSquaredAccummulator <- 0
# loop through all rows in data set
for (i in 1:nrow(data))
{
# add to accumulator the dif Squared
difSquaredAccummulator <- difSquaredAccummulator + myLOOCVLoop(data,i)
}
# get average of dif squared == MSE for LOOCV
mseLOOCV <- difSquaredAccummulator / nrow(data)
print(paste("My LOOCV: ", mseLOOCV))
##transform response and predictor
shift<-ar.1$coef
#?lag
#create new column bind, shifts company variable by 1
y<-cbind(as.ts(company),lag(company))
yprime<-y[,2] - shift*y[,1]
y
yprime
x<-cbind(as.ts(industry),lag(industry))
xprime<-x[,2] - shift*x[,1]
x
xprime
##perform regression on transformed variables
result.prime<-lm(yprime~xprime)
result.prime
View(mcData)
View(mcData)
source('~/UVaCode/R/STAT6021/Module11/tutorial_module11.R', echo=TRUE)
#setup
library(dplyr)
# get the data
mcData<-read.table("mcgill.txt", header=FALSE, sep="")
colnames(mcData)<-c("company","industry")
mcData
attach(mcData)
mcResult<-lm(company~industry)
summary(mcResult)
mcRes<-mcResult$residuals
##PACF plot of residuals
pacf(mcRes, main="PACF of Residuals")
##fit an AR(1) model for residuals
# order = c(1,0,0) indicates the p value == 1
ar.1<-arima(mcRes, order = c(1,0,0), include.mean = FALSE)
ar.1
ar.1$coef
ar.1$coef
This looks significant at lag 1 **and** 4.
### i. Report the estimated autocorrelation at lag 1 for the errors.
**Answer Q1bi**: 0.6442
### ii. Write out the model with the estimated values of the coefficients.
y' = (-1.43)(1 - 0.6442) + (0.176)(x(t) - (0.6442)x(t-1)) + E(t) - 0.6442E(t-1)
**Answer Q1bii**:
y' = (0.509) + 0.176(x') + a(t)
### iii. Assess if the regression model assumptions are met.
First, transform company and industry.
```{r q1b-3}
##transform response and predictor
shift<-ar.1$coef
#create new column bind, shifts company variable by 1
y<-cbind(as.ts(company),lag(company))
yprime <-y[,2] - shift*y[,1]
y
#create new column bind, shifts company variable by 1
y = cbind(as.ts(company),lag(company))
yprime = y[,2] - shift*y[,1]
y
#create new column bind, shifts company variable by 1
y <- cbind(as.ts(company),lag(company))
yprime <- y[,2] - shift*y[,1]
y
yprime
#create new column bind, shifts company variable by 1
y <- cbind(lag(company),as.ts(company))
yprime <- y[,2] - shift*y[,1]
y
y
yprime
detach("package:dplyr", unload = TRUE)
#create new column bind, shifts company variable by 1
y <- cbind(as.ts(company),lag(company))
yprime <- y[,2] - shift*y[,1]
y
yprime
yprime
x<-cbind(as.ts(industry),lag(industry))
x<-cbind(as.ts(industry),lag(industry))
xprime<-x[,2] - shift*x[,1]
xprime
xprime
##perform regression on transformed variables
result.prime<-lm(yprime~xprime)
result.prime
#setup
#library(dplyr)
# get the data
mcData<-read.table("mcgill.txt", header=FALSE, sep="")
colnames(mcData)<-c("company","industry")
mcData
attach(mcData)
?arima
mcResult<-lm(company~industry)
summary(mcResult)
mcRes<-mcResult$residuals
##PACF plot of residuals
pacf(mcRes, main="PACF of Residuals")
# significant at lag 1
##fit an AR(1) model for residuals
# order = c(1,0,0) indicates the p value == 1
ar.1<-arima(mcRes, order = c(1,0,0), include.mean = FALSE)
ar.1
ar.1$coef
##transform response and predictor
shift<-ar.1$coef
#?lag
#create new column bind, shifts company variable by 1
y <- cbind(as.ts(company),lag(company))
yprime <- y[,2] - shift*y[,1]
y
yprime
x<-cbind(as.ts(industry),lag(industry))
xprime<-x[,2] - shift*x[,1]
x
xprime
##perform regression on transformed variables
result.prime<-lm(yprime~xprime)
result.prime
##residual plot
plot(result.prime$fitted.values,result.prime$residuals, main="Plot of Residuals against Fitted Values")
abline(h=0,col="red")
##acf plot of residuals
acf(result.prime$residuals)
##qq plot of residuals
qqnorm(result.prime$residuals)
qqline(result.prime$residuals, col="red")
summary(result.prime)
# setup
library(boot)
# get the data & attach
data<-read.table("nfl.txt", header=TRUE, sep="")
attach(data)
# myLOOCVLoop function
# inpuut: the dataset: dataframe, leaveOutIndex: the index to use as the test value
# output: the MSE for the requested loop of LOOCV
myLOOCVLoop <- function(theData, leaveOutIndex) {
# leave out the i-th value for testing
test <- theData[leaveOutIndex, ]
# keep rest of data for training
train <- theData[-leaveOutIndex, ]
# fit to training data
glm.fit<-glm(y~x2+x7+x8, data=train)
## get predicted value from test data
preds<-predict(glm.fit,newdata=test)
#print(paste("Prediction: ", preds))
#print(paste("Actual: ", test[1]))
# calculate square of difference between predicted and actual
difsquared = (preds - test[1])^2
# return dif squared
return(difsquared)
}
# I want to calculate: #mean((data$actual - data$pred)^2)
# create an accumulator variable
difSquaredAccummulator <- 0
# loop through all rows in data set
for (i in 1:nrow(data))
{
# add to accumulator the dif Squared
difSquaredAccummulator <- difSquaredAccummulator + myLOOCVLoop(data,i)
}
# get average of dif squared == MSE for LOOCV
mseLOOCV <- difSquaredAccummulator / nrow(data)
print(paste("My LOOCV: ", mseLOOCV))
source('~/UVaCode/R/STAT6021/Module11/HW11.R', echo=TRUE)
