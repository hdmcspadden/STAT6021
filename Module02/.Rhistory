demo()
is.things
demo(is.things)
concrete <- c(3930,4060,3300,3200,2930,3850,4060,4020)
mean(concrete)
median(concrete)
mode(concrete)
range(concrete)
4060-2930
sd(concrete)
max(concrete)
min(concrete)
max(concrete) - min(concrete)
plot(concrete)
plot(concrete)
plot(concretesorted)
mean(concrete)
concrete <- c(3930,4060,3300,3200,2930,3850,4060,4020)
mean(concrete)
median(concrete)
mode(concrete)
range(concrete)
sd(concrete)
max(concrete) - min(concrete)
plot(sort(concrete))
frequency(concrete)
range(concrete)
concrete <- c(3930,4060,3300,3200,3200,3850,4060,4020)
mean(concrete)
median(concrete)
mode(concrete)
range(concrete)
sd(concrete)
max(concrete) - min(concrete)
plot(sort(concrete))
frequency(concrete)
concrete <- c(3930,4060,3300,3200,3200,3850,4060,4020)
mean(concrete)
median(concrete)
mode(concrete)
range(concrete)
sd(concrete)
max(concrete) - min(concrete)
plot(sort(concrete))
concrete <- c(3930,4060,3300,3200,3200,3850,4060,4020)
mean(concrete)
median(concrete)
mode(concrete)
range(concrete)
sd(concrete)
max(concrete) - min(concrete)
plot(sort(concrete))
carcrashcosts <- c(180,189,370,618,735,802,1185,1414,1657,1953,2332,2336,3461,4668,6751,9908,10034,21147)
quantile(carcrashcosts)
plot(x^2)
plot(1:100, (1:100) ^ 2, main = "plot(1:100, (1:100) ^ 2)")
lines(lowess((1:100) ^ 2))
qqline(carcrashcosts)
carcrashcosts <- c(180,189,370,618,735,802,1185,1414,1657,1953,2332,2336,3461,4668,6751,9908,10034,21147)
quantile(carcrashcosts)
qqnorm(carcrashcosts)
qqline(carcrashcosts)
greeting("diana")
reticulate::repl_python()
Y
reticulate::repl_python()
greeting("diana")
y
install.packages(c("backports", "devtools", "dplyr", "DT", "ellipsis", "fs", "httr", "isoband", "jsonlite", "pillar", "pkgbuild", "prettyunits", "processx", "promises", "raster", "Rcpp", "remotes", "reticulate", "rlang", "sys", "tibble", "tidyr", "vctrs", "xfun"))
R --version
updateR()
run installr()
install.RTools()
install.packages('installr')
updateR(TRUE)
library(installr)
updateR(TRUE)
knitr::opts_chunk$set(echo = TRUE)
# take a brief look at the data
str(df)
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram()
library(statsr)
library(dplyr)
library(ggplot2)
data(nycflights)
names(nycflights)
?nycflights
str(nycflights)
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram()
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 15)
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 150)
rdu_flights <- nycflights %>% filter(dest == "RDU")
ggplot(data = rdu_flights, aes(x = dep_delay)) + geom_histogram()
rdu_flights %>%
summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
sfo_feb_flights <- nycflights %>%
filter(dest == "SFO", month == 2)
# type your code for Question 1 here, and Knit
sfo_feb_flights <- nycflights %>%
filter(dest == "SFO", month == 2)
count(sfo_feb_flights)
# type your code for Question 2 here, and Knit
ggplot(data = sfo_feb_flights, aes(x = arr_delay)) + geom_histogram()
rdu_flights %>%
group_by(origin) %>%
summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
# type your code for Question 3 here, and Knit
sfo_feb_flights %>%
group_by(carrier) %>%
summarise(median_ad = median(arr_delay), IQR_ad = IQR(arr_delay), n = n())
nycflights %>%
group_by(month) %>%
summarise(mean_dd = mean(dep_delay)) %>%
arrange(desc(mean_dd))
# type your code for Question 4 here, and Knit
# type your code for Question 5 here, and Knit
nycflights %>%
group_by(month) %>%
summarise(median_dd = median(dep_delay)) %>%
arrange(desc(median_dd))
ggplot(nycflights, aes(x = factor(month), y = dep_delay)) +
geom_boxplot()
nycflights <- nycflights %>%
mutate(dep_type = ifelse(dep_delay < 5, "on time", "delayed"))
nycflights %>%
group_by(origin) %>%
summarise(ot_dep_rate = sum(dep_type == "on time") / n()) %>%
arrange(desc(ot_dep_rate))
# type your code for Question 7 here, and Knit
LGA
knitr::opts_chunk$set(echo = TRUE)
# load packages
library(tidyverse)
library(ggplot2)
# Part 1: Read data into data frame
df <- read_csv("Lifetime_Giving_First_Gift_Giving_Card_Anon.csv", col_names = TRUE)
# take a brief look at the data
df %>%
summarise(meanTotalGiving = mean(TotalGivingResUnres ), iqrTotal = IQR(TotalGivingResUnres),
mean2016 = mean("2016GCGiving"),
mean2017 = mean("2017GCGiving"),
mean2018 = mean("2018GCGiving"),
mean2019 = mean("2019GCGiving"),
mean2020 = mean("2020GCGiving"),
n = n())
# take a brief look at the data
df %>%
summarise(meanTotalGiving = mean(TotalGivingResUnres ), iqrTotal = IQR(TotalGivingResUnres),
mean2016 = mean(`2016GCGiving`),
mean2017 = mean(`2017GCGiving`),
mean2018 = mean(`2018GCGiving`),
mean2019 = mean(`2019GCGiving`),
mean2020 = mean(`2020GCGiving`),
n = n())
# do a basic analysis of the data
df %>%
summarise(meanTotalGiving = mean(TotalGivingResUnres ), iqrTotal = IQR(TotalGivingResUnres),
mean2016 = mean(`2016GCGiving`),
mean2017 = mean(`2017GCGiving`),
mean2018 = mean(`2018GCGiving`),
mean2019 = mean(`2019GCGiving`),
mean2020 = mean(`2020GCGiving`),
n = n())
df %>%
filter(`2016GCGiving` > 0) % > %
summarise(mean2016 = mean(`2016GCGiving`),
n = n())
df %>%
filter($2016GCGiving > 0) % > %
names(df)[names(df)=="2016GCGiving"] <- "GCGiving2016"
names(df)[names(df)=="2017GCGiving"] <- "GCGiving2017"
names(df)[names(df)=="2018GCGiving"] <- "GCGiving2018"
names(df)[names(df)=="2019GCGiving"] <- "GCGiving2019"
names(df)[names(df)=="2020GCGiving"] <- "GCGiving2020"
# print the new names
names(df)
# do a basic analysis of the data
df %>%
summarise(meanTotalGiving = mean(TotalGivingResUnres ), iqrTotal = IQR(TotalGivingResUnres),
mean2016 = mean(GCGiving2016),
mean2017 = mean(GCGiving2017),
mean2018 = mean(GCGiving2018),
mean2019 = mean(GCGiving2019),
mean2020 = mean(GCGiving2020),
n = n())
df %>%
filter(GCGiving2016 > 0) % > %
summarise(mean2016 = mean(GCGiving2016),
n = n())
df %>%
filter(GCGiving2016 > 0) %>%
summarise(mean2016 = mean(GCGiving2016),
n = n())
df %>%
filter(GCGiving2016 > 0) %>%
summarise(mean2016 = mean(GCGiving2016),
n = n())
df %>%
filter(GCGiving2017 > 0) %>%
summarise(mean2017 = mean(GCGiving2017),
n = n())
df %>%
filter(GCGiving2016 > 0) %>%
summarise(mean2016 = mean(GCGiving2016),
n = n())
df %>%
filter(GCGiving2017 > 0) %>%
summarise(mean2017 = mean(GCGiving2017),
n = n())
df %>%
filter(GCGiving2018 > 0) %>%
summarise(mean2018 = mean(GCGiving2018),
n = n())
df %>%
filter(GCGiving2019 > 0) %>%
summarise(mean2019 = mean(GCGiving2019),
n = n())
df %>%
filter(GCGiving2016 > 0) %>%
summarise(mean2016 = mean(GCGiving2016),
n = n())
df %>%
filter(GCGiving2017 > 0) %>%
summarise(mean2017 = mean(GCGiving2017),
n = n())
df %>%
filter(GCGiving2018 > 0) %>%
summarise(mean2018 = mean(GCGiving2018),
n = n())
df %>%
filter(GCGiving2019 > 0) %>%
summarise(mean2019 = mean(GCGiving2019),
n = n())
df %>%
filter(GCGiving2020 > 0) %>%
summarise(mean2020 = mean(GCGiving2020),
n = n())
View(df)
View(df)
df <- mutate(df, FirstGiftYear = substrRight(FirstGiftDate, 4))
# load packages
library(tidyverse)
library(ggplot2)
library(stringi)
df <- mutate(df, FirstGiftYear = stri_sub(FirstGiftDate,-4,-1))
View(df)
View(df)
df <- mutate(df, AdditionalDonations = (TotalGivingResUnres - FirstGiftAmount))
View(df)
View(df)
df %>%
group_by(FirstGiftYear) %>%
summarise(countAdditionalGiving = count(AdditionalDonations)) %>%
arrange(desc(FirstGiftYear))
df %>%
group_by(FirstGiftYear) %>%
summarise(countAdditionalGiving = n(AdditionalDonations)) %>%
arrange(desc(FirstGiftYear))
df %>%
group_by(FirstGiftYear) %>%
summarise(countAdditionalGiving = n()%>%
filter(AdditionalDonations > 0))
df %>%
group_by(FirstGiftYear) %>%
filter(AdditionalDonations > 0) %>%
summarise(countAdditionalGiving = n())
ggplot(data = df, aes(x = FirstGiftYear, y = AdditionalDonations))
ggplot(data = df, aes(x = FirstGiftYear, y = AdditionalDonations)) +
geom_bar()
ggplot(data = df, aes(x = FirstGiftYear, y = AdditionalDonations)) +
geom_bar(AdditionalDonations)
ggplot(data = df, aes(x = FirstGiftYear, y = AdditionalDonations)) +
geom_bar(stat = AdditionalDonations)
ggplot(data = df, aes(x = FirstGiftYear, y = AdditionalDonations)) +
geom_bar(stat = stat_count)
ggplot(data = df, aes(x = FirstGiftYear, y = AdditionalDonations)) +
geom_bar(stat = stat_count(AdditionalDonations))
ggplot(data = df, aes(x = FirstGiftYear, y = AdditionalDonations)) +
geom_bar(stat = stat_count())
ggplot(data = df, aes(x = FirstGiftYear, y = AdditionalDonations)) +
geom_bar(stat = stat = "count")
ggplot(data = df, aes(x = FirstGiftYear, y = AdditionalDonations)) +
geom_bar(stat = "count")
ggplot(data = df, aes(x = FirstGiftYear, y = AdditionalDonations)) +
geom_bar(stat = "identity")
ggplot(data = df, aes(x = FirstGiftYear, y = AdditionalDonations)) +
geom_bar(stat = "mean")
ggplot(data = df, aes(x = FirstGiftYear, y = AdditionalDonations)) +
geom_bar(stat = "average")
ggplot(data = df, aes(x = FirstGiftYear))
ggplot(data = df, aes(x = FirstGiftYear)) +
geom_histogram(binwidth = 1)
ggplot(data = df, aes(x = FirstGiftYear)) +
geom_histogram(binwidth = 1)
ggplot(data = df, aes(x = FirstGiftYear)) +
geom_histogram(binwidth = 1, stat = "count")
ggplot(data = df, aes(x = FirstGiftYear)) +
geom_histogram(stat = "count")
ggplot(data = df, aes(x = FirstGiftYear)) +
geom_histogram(stat = "count") +
ggtitle("Number of Additional Gifts per First Gift Year")
ggplot(data = df, aes(x = FirstGiftYear)) +
geom_histogram(stat = "count") +
ggtitle("Number of Gifts per First Gift Year")
ggplot(data = df, aes(x = FirstGiftYear)) +
geom_histogram(stat = "count") +
ggtitle("Number of Gifts per First Gift Year")
df %>%
group_by(FirstGiftYear) %>%
filter(AdditionalDonations > 0) %>%
summarise(averageAdditionalGiving = mean(AdditionalDonations))
ggplot(data = df, aes(x = FirstGiftYear, y = AdditionalDonations)) +
stat_summary(fun.y = "mean", geom = "bar")
ggtitle("Average Additional Giving By First Year of Giving")
# Remove $0 Additional Donations
dfNoZeroAdditionalDonations = df %>%
filter(AdditionalDonations > 0) %>%
ggplot(data = dfNoZeroAdditionalDonations, aes(x = FirstGiftYear, y = AdditionalDonations)) +
stat_summary(fun.y = "mean", geom = "bar")
# Remove $0 Additional Donations
dfNoZeroAdditionalDonations <- df %>%
filter(AdditionalDonations > 0) %>%
ggplot(data = dfNoZeroAdditionalDonations, aes(x = FirstGiftYear, y = AdditionalDonations)) +
stat_summary(fun.y = "mean", geom = "bar")
# Remove $0 Additional Donations
dfNoZeroAdditionalDonations <- df %>%
filter(AdditionalDonations > 0)
ggplot(data = dfNoZeroAdditionalDonations, aes(x = FirstGiftYear, y = AdditionalDonations)) +
stat_summary(fun.y = "mean", geom = "bar")
ggtitle("Average Additional Giving By First Year of Giving")
# Remove $0 Additional Donations
dfNoZeroAdditionalDonations <- df %>%
filter(AdditionalDonations > 0)
ggplot(data = dfNoZeroAdditionalDonations, aes(x = FirstGiftYear, y = AdditionalDonations)) +
stat_summary(fun.y = "mean", geom = "bar") +
ggtitle("Average Additional Giving By First Year of Giving")
pnorm(0.233)
pnorm(0.3301)
1 - pnorm((5.17/29.782))
1 - pnorm((-5.17/29.782))
qnorm(75)
qnorm(.75)
qnorm(.95)
qnorm(.975)
qnorm(.975) # == 95th percentile Z score
pnorm(.95)
pnorm(1.96)
# Find z multiplier at 90% confidence
qnorm(.95)
# Find z multiplier at 98% confidence
qnorm(.99)
# Find the z multiploer at 99% confidence
qnorm(.995)
source('~/UVaCode/R/STAT6021/Module02/tutorial_module2.R')
setwd("~/UVaCode/R/STAT6021/Module02")
#getwd()
data <- read.table('copier.txt', sep='\t', header = TRUE)
head(data,5)
#getwd()
copierData <- read.table('copier.txt', sep='\t', header = TRUE)
head(copierData,5)
attach(copierData)
#getwd()
copierData <- read.table('copier.txt', sep='\t', header = TRUE)
head(copierData,5)
attach(copierData)
#use plot(...) to create a scatterplot
plot(x=Serviced, y=Minutes, main='Plot Minutes Against Number Copiers Serviced', xlab = 'Number of Copiers Serviced', ylab = 'Service Time (minutes)')
corvalue <- cor(x=Serviced,y=Minutes)
print(corvalue)
# create a linear model
copierModel <- lm(Mintes~Serviced)
# create a linear model
copierModel <- lm(Minutes~Serviced)
copierModel
# get the 95% CI for the Minutes coef
confint(model, level = 0.95)
# create a linear model
copierModel <- lm(Minutes~Serviced)
copierModel
# get the 95% CI for the Minutes coef
confint(copierModel, level = 0.95)
# create a linear model
copierModel <- lm(Minutes~Serviced)
copierModel
# get the 95% CI for the Serviced coef
confint(copierModel, "Serviced", level = 0.95)
# create a linear model
copierModel <- lm(Minutes~Serviced)
copierModel
# get the 95% CI for the Serviced coef
CIB1 = confint(copierModel, "Serviced", level = 0.95)
print(paste("95% CI of slope: ", CIB1[1], " - ", CIB1[2]))
source('~/UVaCode/R/STAT6021/Module02/tutorial_module2.R')
source('~/UVaCode/R/STAT6021/Module02/tutorial_module2.R')
corvalue <- cor(x=Serviced,y=Minutes)
print(paste("Correlation between Service Time and Number of Copiers: ", corvalue)
corvalue <- cor(x=Serviced,y=Minutes)
print(paste("Correlation between Service Time and Number of Copiers: ", corvalue))
## 95% CI for response when x=5
newdata<-data.frame(Serviced=5)
#print(newdata) # print newdata to understand what we get back
predict.lm(copierModel,newdata,level=0.95, interval="prediction")
## 95% CI for response when x=5
newdata<-data.frame(Serviced=5)
#print(newdata) # print newdata to understand what we get back
prediction = predict.lm(copierModel,newdata,level=0.95, interval="prediction")
print(paste("The 95% CI for service minutes for a service call for 5 copiers is: ", predictio[1], " - " prediction[2]))
## 95% CI for response when x=5
newdata<-data.frame(Serviced=5)
#print(newdata) # print newdata to understand what we get back
prediction = predict.lm(copierModel,newdata,level=0.95, interval="prediction")
print(paste("The 95% CI for service minutes for a service call for 5 copiers is: ", prediction[1], " - ", prediction[2]))
## 95% CI for response when x=5
newdata<-data.frame(Serviced=5)
#print(newdata) # print newdata to understand what we get back
prediction = predict.lm(copierModel,newdata,level=0.95, interval="prediction")
prediction
print(paste("The 95% CI for service minutes for a service call for 5 copiers is: ", prediction[1], " - ", prediction[2]))
## 95% CI for response when x=5
newdata<-data.frame(Serviced=5)
#print(newdata) # print newdata to understand what we get back
prediction = predict.lm(copierModel,newdata,level=0.95, interval="prediction")
prediction
print(paste("The 95% CI for service minutes for a service call for 5 copiers is: ", prediction[2], " - ", prediction[3]))
## 95% CI for response when x=5
newdata<-data.frame(Serviced=5)
#print(newdata) # print newdata to understand what we get back
prediction = predict.lm(copierModel,newdata,level=0.95, interval="prediction")
print(paste("The 95% CI for service minutes for a service call for 5 copiers is: ", prediction[2], " - ", prediction[3]))
## 95% CI for response when x=5
newdata<-data.frame(Serviced=5)
#print(newdata) # print newdata to understand what we get back
prediction = predict.lm(copierModel,newdata,level=0.95, interval="prediction")
print(paste("The 95% CI for service minutes for a service call for 5 copiers is: ", prediction[2], " - ", prediction[3], " minutes"))
# get all the residuals from the model
copierResiduals <- copierModel$residual
copierResiduals
# get all the residuals from the model
copierResiduals <- copierModel$residual
copierResiduals[0]
# get all the residuals from the model
copierResiduals <- copierModel$residual
copierResiduals[1]
# get all the residuals from the model
copierResiduals <- copierModel$residual
# get the first residual
copierResiduals[1]
# get all the residuals from the model
copierResiduals <- copierModel$residual
# get the first residual
copierResiduals
# get all the residuals from the model
copierResiduals <- copierModel$residual
# get the first residual
copierResiduals[1]
View(copierData)
View(copierData)
meanCopierResidual = mean(copierModel$residual)
print(paste("The mean of the residuals is: ", meanCopierResidual, " minutes."))
tmulti1 <- abs(qt(0.975, 8)) # t multiplier for 95% 2-sided, with n==10
print(tmulti1)
tmulti2 <- abs(qt(0.995, 8)) # t multiplier for 99% 2-sided, with n==10
print(tmulti2)
b1hat <- .4194
tmulti <- qt(0.975,24) # 2-sided 95% t value with 24 df
tmulti
Sxx <- sum((weight - mean(weight))^2)
plot(x=weight, y=BP, main='Plot Systolic BP Against Weight', xlab = 'Weight (lbs)', ylab = 'Systolic BP (mmHg)')
data <- read.table("bp.txt", header = TRUE, sep = "\t")
head(data,10)
#data
attach(data) # attach data so that we can refer directly to column headers
plot(x=weight, y=BP, main='Plot Systolic BP Against Weight', xlab = 'Weight (lbs)', ylab = 'Systolic BP (mmHg)')
corvalue <- cor(x=weight,y=BP) # what statistical value is this?
print(corvalue)
#model <- lm(BP~weight)
#summary(model)
model <- lm(BP~weight)
model
model <- lm(BP~weight)
model
summary(model)
b1hat <- .4194
tmulti <- qt(0.975,24) # 2-sided 95% t value with 24 df
tmulti
Sxx <- sum((weight - mean(weight))^2)
Sxx
seB1hat <- sqrt(sigma(model) / Sxx)
seB1hat
correction <- tmulti * seB1hat
correction
minB1hat <- b1hat - correction
maxB1hat <- b1hat + correction
print(paste("Manual min B1-hat",minB1hat))
print(paste("Manual max B1-hat",maxB1hat))
#print("CI B1-hat: ", minB1hat, " - ", maxB1hat)
# Can also use confint
confint(model, level = 0.95)
#print(paste("95% CI for B1-hat: ", B1CI))
